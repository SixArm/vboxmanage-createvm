#!/bin/sh
set -euf

##
# Create a VirtualBox virtual machine
#
# Syntax:
#
#     vboxmanage-createvm [options] <vm path> <iso path>
#
# Example:
#
#     vboxmanage-createvm my-vm debian-10.7.0-amd64-netinst.iso
#
# Options:
#
#   * --ostype= operating system type (example: Debian_64)
#
#   * --cpus= cpu count (default: 1)
#
#   * --memory= memory size in megabytes (default: 1024)
#
#   * --vram= video RAM size in megabytes (default: 128)
#
#   * --storage= storage size in megabytes (default: 10240)
#
#   * --hostname= (default: my.example.com)
# 
#   * --username= (default: user)
#
#   * --password= (default: secret)
#
#   * --post-install-command= (example: "sudo apt-get upgrade")
#
#
# ## Examples
#
# Here are some popular examples that use long descriptive VM names.
#
# For the VM name, we favor this naming convention:
#
#   * operating system, such as "debian" or "ubuntu"
#   
#   * version, such as "10.7.0" or "20.04"
#  
#   * flavor, such as "desktop" or "server" (optional)
#  
#   * architecture, such as "amd64" or "x86-64"
#
# Example for Debian network installation:
#
#     vboxmanage-createvm \
#     $HOME/vm/debian-10.7.0-amd64 \
#     $HOME/iso/debian-10.7.0-amd64-netinst.iso
#
# Example for Ubuntu desktop installation:
#
#     vboxmanage-createvm \
#     $HOME/vm/ubuntu-20.04-desktop-amd64 \
#     $HOME/iso/ubuntu-20.04-desktop-amd64.iso
#
# Example for Fedora server DVD installation:
#
#     vboxmanage-createvm \
#     $HOME/vm/fedora-32.1.6-server-x86-64 \
#     $HOME/iso/Fedora-Server-dvd-x86_64-32-1.6.iso
#
# Example for 2 CPUs, 2 gigabytes of memory, 20 gigabytes of storage:
#
#     vboxmanage-createvm --cpus=2 --memory=2048 --storage=20480
#
#
# ## Paths
#
# The ISO path can be wherever you have the ISO file.
#
# The VM path is typically within your existing VirtualBox
# virtual machine path, because this program will create the
# disk drive file within that directory.
#
#
# ## Conventions
#
# Conventions for ease of use:
#
#   * The operating system type is automatically guessed 
#     if the VM path basename begins with Debian, Fedora, Ubuntu.
#     You can override this by using `-o`.
#
#   * The command that will run post-install is automatically set
#     if the `ostype` begins with Debian, Fedora, Ubuntu.
#     You can override this by using `-c`.
#
#
# ## Purpose
#
# The purpose of these settings is to do a simple setup
# for new users, akin to a tutorial that is easy to change.
#
# This program is not attempting to be a full featured
# installation such as with all settings configurable via
# command line options.
#
# We welcome constructive feedback.
#
#
# ## Settings
#
# This program uses our preferred settings, and you can
# edit this program to use the settings that you want. 
#
# This program uses our organization's configuration:
#
#   * Operating system current version
#
#   * United States English
#
#   * UTC time zone
#
#
# ## Related commands
#
# List vms:
#
#     vboxmanage list vms
#
# Delete a vm:
#
#     vboxmanage unregistervm <uuid> --delete
#
# Remove a vm that is inaccessible:
#
#     vboxmanage unregistervm <uuid>
#
# List drives:
#
#     vboxmanage list hdds
#
# Delete a drive:
#
#     vboxmanage closemedium <uuid> --delete
#
#
# ## Formats for disks
#
# We typically use these formats:
#
#   * VMDK: VMWare uses VMDK as the default disk image format.
#     Multipe VMDK versions and variations exist, so it’s important
#     to understand which one you’re using and where it can be used.
#
#   * VDI: VirtualBox uses VDI as the default disk image format.
#     VDI is not compatible with VMWare
#
#
# ## Encryption
#
# Question: Are there performance and/or security advantages to using 
# the VirtualBox Disk Encryption over OS disk encryption in the VM?
#
# Answer: As I understand it, a good point of the VirtualBox encryption is 
# you can easily change your mind, encrypt a VM that isn't or decrypt a VM
# which is, and use the result with VirtualBox. Making a decrypted image 
# from an Ubuntu LUKS-encrypted one and vice-versa is likely possible but 
# would be more complicated.
#
# Also, with the VirtualBox encryption you can store the encryption 
# passphrase in the VB config outside of the VM, so you can boot the VM
# without having to enter a decryption passphrase. Of course you have to
# keep the VB config safe to avoid disclosure of the passphrase.
#
# Another benefit of using VirtualBox encryption is that you can securely
# save the VM state to resume later. Encrypted VMs have their state file 
# encrypted as well. In contrast, if you use Ubuntu full-disk encryption 
# features of the guest, then saving the VM state will effectively leak 
# the encryption key to the host's storage in the state file.
#
# See https://superuser.com/questions/1445735/virtualbox-disk-encryption-vs-ubuntu-vm-disk-encryption
#
#
# ## How to encrypt
#
# To support VirtualBox Disk Encryption of the virtual machine, you need 
# to install VirtualBox Extension Pack, available at the VirtualBox site.
# 
# The Extension Pack is not included by default, because it can contain 
# system level software that could be potentially harmful to your system.
#
# The version of Extension Pack needs to match your VirtualBox version.
# So in case of installation issues, try to shut down all your VMs, then
# then upgrade your VirtualBox.
#
# After you install Extension Pack, the encrypt operation can use the
# command-line interface with this syntax:
#
#     VBoxManage encryptmedium "uuid|filename" \
#     --newpassword "file|-" \
#     --cipher "cipher id" \
#     --newpasswordid "id"
#
# See https://superuser.com/questions/1072752/how-to-encrypt-vm-box-via-vboxmanage
#
#
# ## Other resources
#
# https://spin.atomicobject.com/2013/06/03/ovf-virtual-machine/
#
# https://github.com/jedi4ever/veewee
#
# ## Tracking
#
# * Command: vboxmanage-createvm
# * Version: 2.7.0
# * Created: 2018-10-20
# * Updated: 2021-01-22T02:04:48Z
# * License: GPL-2.0-only
# * Contact: Joel Parker Henderson (https://joelparkerhenderson.com)
##

## Helpers from sixarm-unix-shell-scripts

# out: print output message to stdout
out() { printf %s\\n "$*" ; }

# err: print error message to stderr
err() { >&2 printf %s\\n "$*" ; }

# die: print error message to stderr, then exit with error code 1
die() { >&2 printf %s\\n "$*" ; exit 1 ; }

## Variables - you might want to change these defaults

vm_dir=
vm_path=
iso_dir=
iso_path=
ostype=
cpus=1
memory=1024
vram=128
storage=10240
hostname="my.example.com"
username="user"
password="secret"
post_install_command=

## Arg parse

for arg; do
    shift
    case $arg in
	--[[:alnum:]][-_[:alnum:]]*)
	    key="${arg#--}"
	    case $arg in
		*=*)
		    key="${key%%=*}"
		    value="${arg#*=}";
		    ;;
		*)
		    value=true
		    ;;
	    esac
	    key="${key//-/_}"
	    eval "$key"=\$value
	    ;;
	*)
	    set -- "$@" "$arg"
	    ;;
    esac
done

## Input ISO path and VM path

vm_path="$1"   # e.g. $HOME/vm/debian-10.7.0-amd64
iso_path="$2"  # e.g. $HOME/iso/debian-10.7.0-amd64-netinst.iso

vm=$(basename "$vm_path")
vm_dir=$(dirname "$vm_path")

iso=$(basename "$iso_path")
iso_dir=$(dirname "$iso_path")

## Preflight

[ -f "$iso_path" ] || die "Cannot find ISO file: $iso_path"
[ -d "$vm_dir" ] || die "Cannot find VM directory: $vm_dir"

## Conventions

# To list all the operating system types:
#
#     VBoxManage list ostypes

if [ -z "$ostype" ]; then
	vm_lower=$(echo "$vm" | tr '[:upper:]' '[:lower:]')
	case $vm_lower in
		archlinux*)    ostype="ArchLinux64";;
		dos*)          ostype="DOS";;
		debian*)       ostype="Debian_64";;
		fedora*)       ostype="Fedora_64";;
		freebsd*)      ostype="FreeBSD_64";;
		gentoo*)       ostype="Gentoo_64";;
		jrockit*)      ostype="JRockitVE";;
		l4*)           ostype="L4";;
		linux*)        ostype="Linux?";;
		macos*)        ostype="MacOS_?";;
		mandriva*)     ostype="Mandriva_64";;
		netbsd*)       ostype="NetBSD_64";;
		netware*)      ostype="Netware";;
		openbsd*)      ostype="OpenBSD_64";;
		opensolaris*)  ostype="OpenSolaris_64";;
		opensuse*)     ostype="OpenSUSE_64";;
		oracle*)       ostype="Oracle_64";;
		os2*)          ostype="OS2?";;
		qnx*)          ostype="QNX";;
		solaris*)      ostype="Solaris_64";;
		redhat*)       ostype="RedHat_64";;
		turbolinux*)   ostype="Turbolinux_64";;
		ubuntu*)       ostype="Ubuntu_64";;
		vboxbs*)       ostype="VBoxBS_64";;
		windows*)      ostype="Windows?";;
		xandros*)      ostype="Xandros_64";;
	esac
fi

if [ -z "$post_install_command" ]; then
	case $ostype in
		ArchLinux|ArchLinux64)	post_install_command="sudo pacman --sync --refresh; sudo pacman --sync --needed archlinux-keyring; sudo pacman --sync --sysupgrade";;
		DOS)	                : ;;
		Debian|Debian_64) 	post_install_command="sudo apt-get -y update; sudo apt-get -y upgrade; sudo apt-get -y dist-upgrade";;
		Fedora|Fedora_64)	post_install_command="sudo yum --assumeyes --obsolete update; sudo yum --assumeyes --obsolete upgrade; sudo yum --assumeyes clean";;
		FreeBSD|FreeBSD_64)	post_install_command="sudo freebsd-update fetch; sudo freebsd-update install";;
		Gentoo|Gentoo_64)       : ;;
		JRockitVE)		: ;;
		L4)			: ;;
		Linux*)			: ;;
		Mandriva|Mandriva_64)   : ;;
		MacOS*)			: ;;
		NetBSD|NetBSD_64)	post_install_command="sudo pkg_add -u";;
		Netware)	        : ;;
		OpenBSD|OpenBSD_64)	post_install_command="sudo pkg_add -u";;
		OpenSUSE|OpenSUSE_64)	: ;;
		Oracle|Oracle_64)	: ;;
		OS2*)			: ;;
		Other|Other_64)		: ;;
		QNX)			: ;;
		RedHat|RedHat_64)	post_install_command="sudo yum --assumeyes --obsolete update; sudo yum --assumeyes --obsolete upgrade; sudo yum --assumeyes clean";;
		Solaris|Solaris_64|Solaris11_64|OpenSolaris|OpenSolaris_64) : ;;
		Turbolinux|Turbolinux_64) : ;;
		Ubuntu|Ubuntu_64)	post_install_command="sudo apt-get -y update; sudo apt-get -y upgrade; sudo apt-get -y dist-upgrade";;
		VBoxBS_64)              : ;;
		Windows*)  		: ;;
		Xandros|Xandros_64)	: ;;
	esac
fi

## Configuration - you might want to change these

# Disk drive: we prefer the disk drive format VMDK versus VDI
dd="$vm.vmdk"

# Use encryption: we prefer this off because we want flexibility
use_encryption=false

# Use auxiliary: this is a work in progress for the Debian bug
use_auxiliary=false

# Fix Debian bug: this is a work in progress for Ubuntu server
fix_debian_bug=false

# If we're installing the server, then we need to deal with the
# Debian bug, so we need to use an auxiliary directory somewhere.
# We prefer creating the directory alongside the ISO file, because
# we want to easily see the config files that the ISO is creating,
# and we also want to keep the files so we have a record of the work.
# Other developers may prefer to put the auxiliary directory into
# a temporary directory and delete the directory after installation.

if [ "$use_auxiliary" = true ]; then
	auxiliary_base_path="$iso_path.auxiliary/"
	mkdir -p "$auxiliary_base_path"
fi

## Create the VM

VBoxManage createvm \
--name "$vm" \
--ostype "$ostype" \
--register

VBoxManage createmedium \
--filename "$vm_path/$dd" \
--size "$storage"

VBoxManage storagectl "$vm" \
--name SATA \
--add SATA \
--controller IntelAhci

VBoxManage storageattach "$vm" \
--storagectl SATA \
--port 0 \
--device 0 \
--type hdd \
--medium "$vm_path/$dd"

VBoxManage storagectl "$vm" \
--name IDE \
--add ide

VBoxManage storageattach "$vm" \
--storagectl IDE \
--port 0 \
--device 0 \
--type dvddrive \
--medium "$iso_path"

VBoxManage modifyvm "$vm" \
--cpus "$cpus"

VBoxManage modifyvm "$vm" \
--memory "$memory" \
--vram "$vram"

VBoxManage modifyvm "$vm" \
--ioapic on

VBoxManage modifyvm "$vm" \
--nic1 nat

VBoxManage modifyvm "$vm" \
--boot1 dvd \
--boot2 disk \
--boot3 none \
--boot4 none

# TODO: research how to create nics.
#
# VBoxManage modifyvm "$vm" \
# --nic1 bridged \
# --bridgeadapter1 wlan0 \
# --nic2 nat \

if [ "$use_encryption" = true ]; then
	password_path="$iso_path.password.txt"
	echo "$password" > "$password_path"
	VBoxManage encryptmedium "$vm_dir/$vm/$dd" \
	--newpassword "$password_path" \
	--cipher "AES-XTS256-PLAIN64" \
	--newpasswordid "demo"
fi

if [ "$use_auxiliary" = true ]; then
	VBoxManage unattended install "$vm" \
	--auxiliary-base-path="$auxiliary_base_path" \
	--iso="$iso_path" \
	--hostname="$hostname" \
	--user="$username" \
	--password="$password" \
	--country=US \
	--locale=en_US \
	--time-zone=UTC \
	--post-install-command="$post_install_command"
else
	VBoxManage unattended install "$vm" \
	--iso="$iso_path" \
	--hostname="$hostname" \
	--user="$username" \
	--password="$password" \
	--country=US \
	--locale=en_US \
	--time-zone=UTC \
	--post-install-command="$post_install_command"
fi

# Fix Debian Stretch bug by changing the setup from wrong 
# interactive menu installation to headless installation.
# See https://www.virtualbox.org/ticket/18410
#
# This is needed for Ubuntu server, not for Ubuntu desktop.
#
# TODO: this currently doesn't work -- we welcome advice!

if [ "$fix_debian_bug" = true ]; then
	cp "${auxiliary_base_path}isolinux-txt.cfg" "${auxiliary_base_path}isolinux-txt.cfg.orig"
	auxiliary_patch_file="$HOME/tmp/patch.diff"
	patch "${auxiliary_base_path}isolinux-txt.cfg" < "${auxiliary_patch_file}"
	cp "$HOME/tmp/isolinux-txt.cfg" "${auxiliary_base_path}isolinux-txt.cfg" 
	sed -i.orig 's/^default vesa.*/default live-install/' "${auxiliary_base_path}isolinux-isolinux.cfg"
fi

# Enable Remote Desktop Protocol (RDP).
# Useful for administration on an headless environment.

VBoxManage modifyvm "$vm" --vrde on
VBoxManage modifyvm "$vm" --vrdemulticon on --vrdeport 10001

VBoxManage startvm "$vm"
